name: Sync and Publish tirex-mirror

on:
  workflow_dispatch:
  schedule:
    - cron: "0 4 * * *"  # Daily at 4 AM UTC

jobs:
  sync-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout mirror repository
        uses: actions/checkout@v3

      - name: Fetch latest commit hash from upstream
        id: fetch_hash
        run: |
          LATEST_HASH=$(git ls-remote https://github.com/NX-AI/tirex.git refs/heads/main | cut -f1)
          echo "latest_hash=$LATEST_HASH" >> $GITHUB_OUTPUT

      - name: Check if update is needed
        id: should_run
        run: |
          if [ -f latest_tirex_commit.txt ]; then
            LAST_HASH=$(cat latest_tirex_commit.txt)
          else
            LAST_HASH="none"
          fi
          if [ "$LAST_HASH" = "${{ steps.fetch_hash.outputs.latest_hash }}" ]; then
            echo "No new commit. Skipping."
            echo "updated=false" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "updated=true" >> $GITHUB_OUTPUT
          fi

      - name: Clone Upstream Repo
        if: steps.should_run.outputs.updated == 'true'
        run: git clone https://github.com/NX-AI/tirex.git upstream

      - name: Copy updated source and LICENSE
        if: steps.should_run.outputs.updated == 'true'
        run: |
          apt-get update && apt-get install -y rsync
          # Copy upstream content to root, excluding mirror-specific files
          rsync -av \
            --exclude='.git/' \
            --exclude='.github/' \
            --exclude='.gitignore' \
            --exclude='README.md' \
            --exclude='MANIFEST.in' \
            --exclude='NOTICE.txt' \
            --exclude='LICENSE_MIRROR.txt' \
            upstream/ ./

      - name: Patch pyproject.toml
        if: steps.should_run.outputs.updated == 'true'
        run: |
          VERSION="$(date +%Y.%m.%d)"
          
          # Install toml library and patch the pyproject.toml
          pip install toml

          python3 << EOF
          import toml

          # Load the original pyproject.toml
          with open('upstream/pyproject.toml', 'r') as f:
              data = toml.load(f)

          # Update specific fields
          data['project']['name'] = 'tirex-mirror'
          data['project']['version'] = '$VERSION'
          data['project']['authors'] = [{'name': 'Arpad Rozsas', 'email': 'rozsasarpi@gmail.com'}]
          data['project']['description'] = 'Unofficial mirror of NX-AI/tirex for packaging'

          # Update URLs
          data['project']['urls']['Repository'] = 'https://github.com/rozsasarpi/tirex-mirror'
          data['project']['urls']['Issues'] = 'https://github.com/rozsasarpi/tirex-mirror/issues'

          # Write the modified pyproject.toml
          with open('pyproject.toml', 'w') as f:
              toml.dump(data, f)
          EOF

      - name: Install build dependencies and build package
        if: steps.should_run.outputs.updated == 'true'
        run: |
          pip install build
          python -m build

      - name: Publish to PyPI
        if: steps.should_run.outputs.updated == 'true'
        uses: pypa/gh-action-pypi-publish@v1.8.8
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}

      - name: Create GitHub Release
        if: steps.should_run.outputs.updated == 'true'
        run: |
          VERSION="$(date +%Y.%m.%d)"
          UPSTREAM_COMMIT_SHORT="${{ steps.fetch_hash.outputs.latest_hash }}"
          UPSTREAM_COMMIT_SHORT="${UPSTREAM_COMMIT_SHORT:0:7}"
          
          # Configure git for tagging
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # Create git tag
          git tag "v$VERSION"
          git push origin "v$VERSION"
          
          # Create release notes
          cat > release_notes.md << EOF
          ## TiRex Mirror Release v$VERSION
          
          This release mirrors upstream commit [\`$UPSTREAM_COMMIT_SHORT\`](https://github.com/NX-AI/tirex/commit/${{ steps.fetch_hash.outputs.latest_hash }}) from [NX-AI/tirex](https://github.com/NX-AI/tirex).
          
          ### Installation
          \`\`\`bash
          pip install tirex-mirror==$VERSION
          \`\`\`
          
          ### Usage
          \`\`\`python
          import tirex
          # Use as normal TiRex package
          \`\`\`
          
          ### Changes
          - Updated to upstream commit ${{ steps.fetch_hash.outputs.latest_hash }}
          - See [upstream repository](https://github.com/NX-AI/tirex) for detailed changes
          
          ### Files
          - \`tirex_mirror-$VERSION.tar.gz\` - Source distribution
          - \`tirex_mirror-$VERSION-py3-none-any.whl\` - Universal wheel
          EOF
          
          # Create GitHub release
          gh release create "v$VERSION" \
            --title "TiRex Mirror v$VERSION" \
            --notes-file release_notes.md \
            --latest \
            dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Record latest commit hash
        if: steps.should_run.outputs.updated == 'true'
        run: |
          echo "${{ steps.fetch_hash.outputs.latest_hash }}" > latest_tirex_commit.txt
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add latest_tirex_commit.txt LICENSE
          git commit -m "Update to upstream commit ${{ steps.fetch_hash.outputs.latest_hash }}"
          git push
